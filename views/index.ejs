<!-- Include necessary scripts like socket.io and adapter.js -->

<!-- add script bootstrap 5 -->
<script
    src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
    crossorigin="anonymous"
></script>
<script
    src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"
></script>
<script
    src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"
></script>
<link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
    crossorigin="anonymous"
/>
<!-- add script jquery -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<br />
<h1 class="text-center"><%=roomId%></h1>
<br />
<!-- add class boostrap for ul -->
<ul class="list-group text-center d-none"></ul>
<br />
<div
    class="container justify-content-center d-flex align-items-center h-25 w-100"
>
    <video
        id="localVideo"
        muted
        class="border rounded"
        width="300"
        height="150"
        autoplay
    ></video>
    <video
        id="remoteVideo"
        class="border rounded"
        width="300"
        height="150"
        autoplay
    ></video>
</div>
<br />
<div class="d-none">
    <div
        class="container justify-content-center d-flex align-items-center w-100"
    >
        <button id="startCallButton" class="btn btn-primary">Start Call</button>
        <button id="endCallButton" class="btn btn-danger">End Call</button>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io.connect();
    const roomId = '<%=roomId%>';
    socket.emit('join-room', roomId);

    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');

    const configuration = {
        iceServers: [
            { urls: 'stun:stun.relay.metered.ca:80' },
            {
                urls: 'turn:a.relay.metered.ca:80',
                username: 'f53cdafbffcc24c341620211',
                credential: 'IsJ63Gjfyd9x25La',
            },
            {
                urls: 'turn:a.relay.metered.ca:80?transport=tcp',
                username: 'f53cdafbffcc24c341620211',
                credential: 'IsJ63Gjfyd9x25La',
            },
            {
                urls: 'turn:a.relay.metered.ca:443',
                username: 'f53cdafbffcc24c341620211',
                credential: 'IsJ63Gjfyd9x25La',
            },
            {
                urls: 'turn:a.relay.metered.ca:443?transport=tcp',
                username: 'f53cdafbffcc24c341620211',
                credential: 'IsJ63Gjfyd9x25La',
            },
        ],
    };
    let peerConnection = new RTCPeerConnection(configuration);
    let remoteUserId;

    socket.on('offer', async (data) => {
        const offer = data.offer;
        remoteUserId = data.target;

        peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        peerConnection
            .createAnswer()
            .then((answer) => {
                return peerConnection.setLocalDescription(answer);
            })
            .then(() => {
                socket.emit('answer', {
                    target: remoteUserId,
                    answer: peerConnection.localDescription,
                });
            });
    });

    socket.on('answer', (answer) => {
        peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on('ice-candidate', (candidate) => {
        peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    });

    peerConnection.ontrack = function ({ streams: [stream] }) {
        if (remoteVideo) {
            remoteVideo.srcObject = stream;
        }
    };

    socket.on('new-user', (userId) => {
        remoteUserId = userId;
    });

    socket.on('room-full', () => {
        alert('room is full');
        window.location.href = '/';
    });

    (async () => {
        await preCall();
    })();

    async function preCall() {
        peerConnection = null;
        peerConnection = new RTCPeerConnection(configuration);
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                socket.emit('ice-candidate', {
                    target: remoteUserId,
                    candidate: event.candidate,
                });
            }
        };
        peerConnection.ontrack = function ({ streams: [stream] }) {
            if (remoteVideo) {
                remoteVideo.srcObject = stream;
            }
        };
        let localMediaStream = localVideo.srcObject;
        if (!localMediaStream) {
            localMediaStream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true,
            });
            localVideo.srcObject = localMediaStream;
        }
        peerConnection.addStream(localMediaStream);

        if (!remoteUserId) {
            socket.emit('ready-call', roomId);
        }
    }

    socket.on('end-call', async () => {
        try {
            remoteVideo.srcObject = null;
            peerConnection.close();
            await preCall();
        } catch (error) {
            console.error('Error ending the call:', error);
        }
    });

    socket.on('ready-call', async () => {
        try {
            await preCall();

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            socket.emit('offer', { target: remoteUserId, offer: offer });
        } catch (error) {
            console.error('Error starting the call:', error);
        }
    });
</script>
