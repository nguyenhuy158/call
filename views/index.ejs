<!-- Include necessary scripts like socket.io and adapter.js -->

<!-- add script bootstrap 5 -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
      integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<!-- add script jquery -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>



<br>
<h1 class="text-center">
    <%=roomId%>
</h1>
<br>
<!-- add class boostrap for ul -->
<ul class="list-group text-center"></ul>
<br>
<div class="container justify-content-center d-flex align-items-center h-25 w-100">
    <video id="localVideo" muted class="border rounded" width="300" height="150" autoplay></video>
    <video id="remoteVideo" muted class="border rounded" width="300" height="150" autoplay></video>
</div>
<br>
<div class="container justify-content-center d-flex align-items-center w-100">
    <button id="startCallButton" class="btn btn-primary">Start Call</button>
    <button id="endCallButton" class="btn btn-danger">End Call</button>
</div>


<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io.connect();
    // Room handle logic
    const roomId = '<%=roomId%>';
    socket.emit('join-room', roomId);
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');


    const configuration = {
        iceServers: [
            {
                urls: "stun:stun.relay.metered.ca:80",
            },
            {
                urls: "turn:a.relay.metered.ca:80",
                username: "f53cdafbffcc24c341620211",
                credential: "IsJ63Gjfyd9x25La",
            },
            {
                urls: "turn:a.relay.metered.ca:80?transport=tcp",
                username: "f53cdafbffcc24c341620211",
                credential: "IsJ63Gjfyd9x25La",
            },
            {
                urls: "turn:a.relay.metered.ca:443",
                username: "f53cdafbffcc24c341620211",
                credential: "IsJ63Gjfyd9x25La",
            },
            {
                urls: "turn:a.relay.metered.ca:443?transport=tcp",
                username: "f53cdafbffcc24c341620211",
                credential: "IsJ63Gjfyd9x25La",
            },
        ],
    };
    let peerConnection = new RTCPeerConnection(configuration);
    let remoteUserId;

    // Handle ice candidate events
    peerConnection.onicecandidate = (event) => {
        console.log(`ðŸš€ ~ remoteUserId:`, remoteUserId);
        console.log(`ðŸš€ ~ event:`, event);
        if (event.candidate) {
            socket.emit('ice-candidate', {
                target: remoteUserId,
                candidate: event.candidate,
            });
        }
    };

    // Handle incoming offer
    socket.on('offer', (data) => {
        const offer = data.offer;
        remoteUserId = data.target;
        console.log(`ðŸš€ ~ socket.on ~ data:`, data);
        console.log(`ðŸš€ ~ socket.on ~ remoteUserId:`, remoteUserId);

        peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        peerConnection.createAnswer().then((answer) => {
            console.log(`ðŸš€ ~ peerConnection.createAnswer ~ answer:`, answer);
            return peerConnection.setLocalDescription(answer);
        }).then(() => {
            socket.emit('answer', { target: remoteUserId, answer: peerConnection.localDescription });
        });
    });

    // Handle incoming answer
    socket.on('answer', (answer) => {
        console.log(`ðŸš€ ~ socket.on ~ answer:`, answer);
        peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    // Handle incoming ice candidate
    socket.on('ice-candidate', (candidate) => {
        console.log(`ðŸš€ ~ remoteUserId:`, remoteUserId);
        console.log(`ðŸš€ ~ socket.on ~ candidate:`, candidate);
        peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    });

    // Add your code to get user media, create offer, and start the call
    socket.on('connect', () => {
        console.log('connected');
        console.log(socket.id);
    });

    // Listen for track event
    peerConnection.ontrack = function ({ streams: [stream] }) {
        console.log(`ðŸš€ ~ stream:`, stream);
        // Set the source of the video element to the stream
        if (remoteVideo) {
            remoteVideo.srcObject = stream;
        }
    };
    // Assume you have a button with the id "startCallButton" in your HTML
    setInterval(() => {
        $(`#${socket.id}`).css('color', 'red');
    }, 100);

    socket.on('new-user', (userId) => {
        console.log(`ðŸš€ ~ socket.on ~ new-user:`, userId);
        $('ul').append(`<li id="${userId}">${userId}</li>`);
    });

    socket.on('all-users', (users) => {
        console.log(`ðŸš€ ~ socket.on ~ all-users:`, users);

        users.forEach((userId) => {
            $('ul').append(`<li id="${userId}">${userId}</li>`);
        });
    });

    socket.on('user-disconnected', (userId) => {
        console.log(`ðŸš€ ~ socket.on ~ user-disconnected:`);
        $(`#${userId}`).remove();
    });

    const startCallButton = document.getElementById('startCallButton');

    (async () => {
        // Step 1: Get User Media
        const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });

        // Display the local video stream on a video element (assume you have an element with id "localVideo")
        const localVideo = document.getElementById('localVideo');
        localVideo.srcObject = mediaStream;

        // Step 2: Create Offer
        peerConnection.addStream(mediaStream); // Deprecated, consider using addTrack
    })();

    // how to write jquery handle click butotn startcallbutton or all li in ul list also handle async function below
    $('ul').on('click', 'li', async function () {
        try {
            const offer = await peerConnection.createOffer();
            console.log(`ðŸš€ ~ startCallButton.addEventListener ~ offer:`, offer);

            await peerConnection.setLocalDescription(offer);

            remoteUserId = $(this).attr('id');
            socket.emit('offer', { target: remoteUserId, offer: offer });
        } catch (error) {
            console.error('Error starting the call:', error);
        }
    });

    startCallButton.addEventListener('click', async () => {
        try {
            const offer = await peerConnection.createOffer();
            console.log(`ðŸš€ ~ startCallButton.addEventListener ~ offer:`, offer);

            // Step 3: Set Local Description
            await peerConnection.setLocalDescription(offer);

            // Step 4: Send Offer to the Other Peer
            remoteUserId = prompt("Enter socket id"); // Replace with the actual identifier of the remote user
            socket.emit('offer', { target: remoteUserId, offer: offer });
        } catch (error) {
            console.error('Error starting the call:', error);
        }
    });


    // Handle end call button using jquery 
    $('#endCallButton').on('click', async () => {
        try {
            // Step 1: Close local stream by stopping all tracks
            const localStream = localVideo.srcObject;
            localStream.getTracks().forEach((track) => track.stop());
            localVideo.srcObject = null;

            // Step 2: Close remote stream by stopping all tracks
            const remoteStream = remoteVideo.srcObject;
            remoteStream.getTracks().forEach((track) => track.stop());
            remoteVideo.srcObject = null;

            socket.emit('end-call', remoteUserId);

            // Step 3: Close peer connection
            peerConnection.close();
            peerConnection = null;
            peerConnection = new RTCPeerConnection(configuration);

            const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            localVideo.srcObject = mediaStream;
            peerConnection.addStream(mediaStream);
            window.location.reload();

        } catch (error) {
            console.error('Error ending the call:', error);
        }
    });
    // Handle end call from remote user
    socket.on('end-call', async () => {
        try {
            // Step 1: Close local stream by stopping all tracks
            const localStream = localVideo.srcObject;
            localStream.getTracks().forEach((track) => track.stop());
            localVideo.srcObject = null;

            // Step 2: Close remote stream by stopping all tracks
            const remoteStream = remoteVideo.srcObject;
            remoteStream.getTracks().forEach((track) => track.stop());
            remoteVideo.srcObject = null;

            // Step 3: Close peer connection
            peerConnection.close();
            peerConnection = null;
            peerConnection = new RTCPeerConnection(configuration);

            const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            localVideo.srcObject = mediaStream;
            peerConnection.addStream(mediaStream);
            window.location.reload();
        } catch (error) {
            console.error('Error ending the call:', error);
        }
    });

</script>